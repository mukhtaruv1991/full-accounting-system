name: Deploy to Render and Notify

on:
  push:
    branches:
      - main

jobs:
  # --- JOB FOR BACKEND ---
  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    steps:
      - name: 1. Install jq
        run: sudo apt-get -y install jq

      - name: 2. Trigger and Poll
        id: deploy_step
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_BACKEND_SERVICE_ID }}
        run: |
          # Trigger
          deploy_id=$(curl -s -X POST -H "Authorization: Bearer $RENDER_API_KEY" -H "Accept: application/json" "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" | jq -r '.id')
          if [ -z "$deploy_id" ] || [ "$deploy_id" == "null" ]; then echo "::error::Failed to trigger deploy."; exit 1; fi
          echo "deploy_id=$deploy_id" >> $GITHUB_ENV
          
          # Poll
          for i in {1..60}; do
            response=$(curl -s -H "Authorization: Bearer $RENDER_API_KEY" "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys/$deploy_id")
            status=$(echo "$response" | jq -r '.status')
            if [[ "$status" == "live" || "$status" == "build_failed" || "$status" == "deploy_failed" || "$status" == "canceled" ]]; then
              echo "final_status=$status" >> $GITHUB_ENV
              echo "error_reason=$(echo "$response" | jq -r '.error.message // "No details"')" >> $GITHUB_ENV
              exit 0
            fi
            sleep 10
          done
          echo "final_status=timed_out" >> $GITHUB_ENV
          exit 1
        continue-on-error: true

      - name: 3. Send Telegram Notification
        # This step will ALWAYS run, even if the previous step fails or times out.
        if: always()
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          SERVICE_NAME: "Backend"
          FINAL_STATUS: ${{ steps.deploy_step.outputs.final_status || 'trigger_failed' }}
          ERROR_REASON: ${{ steps.deploy_step.outputs.error_reason || 'Could not get reason' }}
        run: |
          # Construct and send the message
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          ACTION_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          if [ "$FINAL_STATUS" == "live" ]; then
            ICON="‚úÖ"; MESSAGE="üöÄ *Deploy Succeeded* for *$SERVICE_NAME*"
            FINAL_TEXT="$ICON $MESSAGE%0A%0A*Commit:* [$SHORT_SHA](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})"
          else
            ICON="‚ùå"; MESSAGE="üö® *Deploy Failed* for *$SERVICE_NAME* with status: \`$FINAL_STATUS\`"
            FINAL_TEXT="$ICON $MESSAGE%0A%0A*Reason:* \`$ERROR_REASON\`%0A*Logs:* [View Action]($ACTION_URL)"
          fi
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" -d "chat_id=$TELEGRAM_CHAT_ID" -d "text=$FINAL_TEXT" -d "parse_mode=Markdown"
          if [ "$FINAL_STATUS" != "live" ]; then exit 1; fi

  # --- JOB FOR FRONTEND (Identical, robust logic) ---
  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    steps:
      - name: 1. Install jq
        run: sudo apt-get -y install jq
      - name: 2. Trigger and Poll
        id: deploy_step
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_FRONTEND_SERVICE_ID }}
        run: |
          # Same trigger and poll logic as backend
          deploy_id=$(curl -s -X POST -H "Authorization: Bearer $RENDER_API_KEY" -H "Accept: application/json" "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" | jq -r '.id')
          if [ -z "$deploy_id" ] || [ "$deploy_id" == "null" ]; then exit 1; fi
          echo "deploy_id=$deploy_id" >> $GITHUB_ENV
          for i in {1..60}; do
            response=$(curl -s -H "Authorization: Bearer $RENDER_API_KEY" "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys/$deploy_id")
            status=$(echo "$response" | jq -r '.status')
            if [[ "$status" == "live" || "$status" == "build_failed" || "$status" == "deploy_failed" || "$status" == "canceled" ]]; then
              echo "final_status=$status" >> $GITHUB_ENV
              echo "error_reason=$(echo "$response" | jq -r '.error.message // "No details"')" >> $GITHUB_ENV
              exit 0
            fi
            sleep 10
          done
          echo "final_status=timed_out" >> $GITHUB_ENV
          exit 1
        continue-on-error: true
      - name: 3. Send Telegram Notification
        if: always()
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          SERVICE_NAME: "Frontend"
          FINAL_STATUS: ${{ steps.deploy_step.outputs.final_status || 'trigger_failed' }}
          ERROR_REASON: ${{ steps.deploy_step.outputs.error_reason || 'Could not get reason' }}
        run: |
          # Same notification logic as backend
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          ACTION_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          if [ "$FINAL_STATUS" == "live" ]; then
            ICON="‚úÖ"; MESSAGE="üöÄ *Deploy Succeeded* for *$SERVICE_NAME*"
            FINAL_TEXT="$ICON $MESSAGE%0A%0A*Commit:* [$SHORT_SHA](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})"
          else
            ICON="‚ùå"; MESSAGE="üö® *Deploy Failed* for *$SERVICE_NAME* with status: \`$FINAL_STATUS\`"
            FINAL_TEXT="$ICON $MESSAGE%0A%0A*Reason:* \`$ERROR_REASON\`%0A*Logs:* [View Action]($ACTION_URL)"
          fi
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" -d "chat_id=$TELEGRAM_CHAT_ID" -d "text=$FINAL_TEXT" -d "parse_mode=Markdown"
          if [ "$FINAL_STATUS" != "live" ]; then exit 1; fi
