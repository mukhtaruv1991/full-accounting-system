name: Deploy to Render and Notify

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy and Notify
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - name: "Backend"
            id: ${{ secrets.RENDER_BACKEND_SERVICE_ID }}
          - name: "Frontend"
            id: ${{ secrets.RENDER_FRONTEND_SERVICE_ID }}

    steps:
      - name: 1. Checkout Code
        uses: actions/checkout@v3

      - name: 2. Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: 3. Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: 4. Install Dependencies
        run: pnpm install

      - name: 5. Trigger Deploy and Notify
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          RENDER_SERVICE_ID: ${{ matrix.service.id }}
          SERVICE_NAME: ${{ matrix.service.name }}
        run: |
          # This combined step triggers, polls, and notifies.
          
          # --- Trigger Deploy ---
          echo "Triggering deploy for $SERVICE_NAME..."
          deploy_id=$(curl -s -X POST \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Accept: application/json" \
            "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" | jq -r '.id')

          if [ -z "$deploy_id" ] || [ "$deploy_id" == "null" ]; then
            echo "::error::Failed to trigger deploy for $SERVICE_NAME."
            exit 1
          fi
          echo "Deploy triggered with ID: $deploy_id"

          # --- Poll for Status ---
          final_status="unknown"
          for i in {1..60}; do
            response=$(curl -s -H "Authorization: Bearer $RENDER_API_KEY" "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys/$deploy_id")
            status=$(echo $response | jq -r '.status')
            echo "Current status for $SERVICE_NAME: $status"
            if [[ "$status" == "live" || "$status" == "build_failed" || "$status" == "deploy_failed" || "$status" == "canceled" ]]; then
              final_status=$status
              break
            fi
            sleep 10
          done

          # --- Send Notification ---
          REPO_NAME="${{ github.repository }}"
          COMMIT_URL="${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}"
          ACTION_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          if [ "$final_status" == "live" ]; then
            ICON="‚úÖ"
            MESSAGE="üöÄ *Deploy Succeeded* for *$SERVICE_NAME*"
          else
            ICON="‚ùå"
            MESSAGE="üö® *Deploy Failed* for *$SERVICE_NAME* with status: \`$final_status\`"
          fi
          
          TEXT="$ICON $MESSAGE%0A%0A*Repository:* [$REPO_NAME](${{ github.server_url }}/$REPO_NAME)%0A*Commit:* [${{ github.sha:0:7 }}]($COMMIT_URL)%0A*Logs:* [View Action]($ACTION_URL)"
          
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -d "chat_id=$TELEGRAM_CHAT_ID" \
            -d "text=$TEXT" \
            -d "parse_mode=Markdown"
