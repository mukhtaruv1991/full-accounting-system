// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id        String   @id @default(cuid())
  name      String
  address   String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users      User[]
  accounts   Account[]
  customers  Customer[]
  suppliers  Supplier[]
  items      Item[]
  sales      Sale[]
  purchases  Purchase[]
  journalEntries JournalEntry[]
  membershipRequests MembershipRequest[]
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  phone     String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  memberships Membership[]
}

model Membership {
  id        String   @id @default(cuid())
  userId    String
  companyId String
  role      String   // "admin", "manager", "viewer", etc.
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([userId, companyId])
}

model MembershipRequest {
  id        String   @id @default(cuid())
  userId    String
  companyId String
  status    String   @default("pending") // pending, approved, rejected
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

// --- Accounting Models ---

model Account {
  id          String   @id @default(cuid())
  companyId   String
  name        String
  code        String
  type        String   // Asset, Liability, Equity, Revenue, Expense
  parentCode  String?
  description String?
  isDebit     Boolean  @default(true)
  balance     Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  @@unique([companyId, code])
}

model Customer {
  id        String   @id @default(cuid())
  companyId String
  name      String
  email     String?
  phone     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  sales   Sale[]
}

model Supplier {
  id        String   @id @default(cuid())
  companyId String
  name      String
  email     String?
  phone     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company   Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  purchases Purchase[]
}

model Item {
  id          String   @id @default(cuid())
  companyId   String
  name        String
  description String?
  price       Float
  cost        Float
  quantity    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  saleItems SaleItem[]
  purchaseItems PurchaseItem[]
}

model Sale {
  id          String   @id @default(cuid())
  companyId   String
  date        DateTime
  customerId  String
  totalAmount Float
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  company  Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  customer Customer @relation(fields: [customerId], references: [id])
  items    SaleItem[]
}

model SaleItem {
  id        String   @id @default(cuid())
  saleId    String
  itemId    String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sale Sale @relation(fields: [saleId], references: [id], onDelete: Cascade)
  item Item @relation(fields: [itemId], references: [id])
}

model Purchase {
  id          String   @id @default(cuid())
  companyId   String
  date        DateTime
  supplierId  String
  totalAmount Float
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  company  Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  supplier Supplier @relation(fields: [supplierId], references: [id])
  items    PurchaseItem[]
}

model PurchaseItem {
  id        String   @id @default(cuid())
  purchaseId String
  itemId    String
  quantity  Int
  cost      Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  purchase Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  item     Item     @relation(fields: [itemId], references: [id])
}

model JournalEntry {
  id              String   @id @default(cuid())
  companyId       String
  date            DateTime
  description     String
  debitAccountId  String
  creditAccountId String
  debitAmount     Float
  creditAmount    Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
}
