// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id        String   @id @default(cuid())
  name      String
  address   String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  memberships     Membership[]
  accounts        Account[]
  customers       Customer[]
  suppliers       Supplier[]
  items           Item[]
  sales           Sale[]
  purchases       Purchase[]
  journalEntries  JournalEntry[]
  joinRequests    JoinRequest[]
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  phone     String?
  phoneHash String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  memberships        Membership[]
  joinRequests       JoinRequest[]
  sentMessages       Message[]
  readStatuses       MessageReadStatus[]
  notifications      Notification[]
  conversations      Conversation[] @relation("UserConversations")
}

model Membership {
  id        String   @id @default(cuid())
  role      String   // "admin", "manager", "employee"
  userId    String
  companyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([userId, companyId])
}

model JoinRequest {
  id        String   @id @default(cuid())
  userId    String
  companyId String
  status    String   @default("pending") // pending, approved, rejected
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Account {
  id          String   @id @default(cuid())
  name        String
  code        String
  type        String   // Asset, Liability, Equity, Revenue, Expense
  isDebit     Boolean  @default(true)
  parentCode  String?
  description String?
  companyId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  company         Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  debitEntries    JournalEntry[]  @relation("DebitEntries")
  creditEntries   JournalEntry[]  @relation("CreditEntries")

  @@unique([companyId, code])
}

model Customer {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String?
  address   String?
  companyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  sales   Sale[]
}

model Supplier {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String?
  address   String?
  companyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company   Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  purchases Purchase[]
}

model Item {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  cost        Float
  quantity    Int      @default(0)
  companyId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Sale {
  id          String   @id @default(cuid())
  date        DateTime
  totalAmount Float
  status      String
  companyId   String
  customerId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  company  Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  customer Customer @relation(fields: [customerId], references: [id])
}

model Purchase {
  id          String   @id @default(cuid())
  date        DateTime
  totalAmount Float
  status      String
  companyId   String
  supplierId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  company  Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  supplier Supplier @relation(fields: [supplierId], references: [id])
}

model JournalEntry {
  id              String   @id @default(cuid())
  date            DateTime
  description     String
  debitAmount     Float
  creditAmount    Float
  companyId       String
  debitAccountId  String
  creditAccountId String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  company       Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  debitAccount  Account @relation("DebitEntries", fields: [debitAccountId], references: [id])
  creditAccount Account @relation("CreditEntries", fields: [creditAccountId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String   // e.g., 'NEW_SALE', 'FRIEND_JOINED'
  message   String
  isRead    Boolean  @default(false)
  entityId  String?  // e.g., saleId, userId
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Conversation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  messages  Message[]
  members   User[]   @relation("UserConversations")
}

model Message {
  id             String              @id @default(cuid())
  content        String
  type           String              @default("text") // text, image, audio
  createdAt      DateTime            @default(now())
  senderId       String
  conversationId String
  
  sender         User                @relation(fields: [senderId], references: [id], onDelete: Cascade)
  conversation   Conversation        @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  readStatuses   MessageReadStatus[]
}

model MessageReadStatus {
  id        String   @id @default(cuid())
  readAt    DateTime @default(now())
  messageId String
  userId    String

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
}
