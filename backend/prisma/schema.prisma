generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id             String           @id @default(cuid())
  name           String
  address        String?
  phone          String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  memberships    Membership[]
  accounts       Account[]
  items          Item[]
  sales          Sale[]
  purchases      Purchase[]
  suppliers      Supplier[]
  customers      Customer[]
  journalEntries JournalEntry[]
  conversations  Conversation[]
}

model User {
  conversations Conversation[] @relation("UserConversations")
  id                 String              @id @default(cuid())
  conversations Conversation[] @relation("UserConversations")
  email              String              @unique
  conversations Conversation[] @relation("UserConversations")
  name               String?
  conversations Conversation[] @relation("UserConversations")
  password           String
  conversations Conversation[] @relation("UserConversations")
  phone              String?             @unique
  conversations Conversation[] @relation("UserConversations")
  phoneHash          String?             @unique
  conversations Conversation[] @relation("UserConversations")
  createdAt          DateTime            @default(now())
  conversations Conversation[] @relation("UserConversations")
  updatedAt          DateTime            @updatedAt
  conversations Conversation[] @relation("UserConversations")
  memberships        Membership[]
  conversations Conversation[] @relation("UserConversations")
  sentMessages       Message[]           @relation("sentMessages")
  conversations Conversation[] @relation("UserConversations")
  readStatuses       MessageReadStatus[]
  conversations Conversation[] @relation("UserConversations")
  participations     Participant[]
  conversations Conversation[] @relation("UserConversations")
  notifications      Notification[]
  conversations Conversation[] @relation("UserConversations")
  membershipRequests MembershipRequest[]
  conversations Conversation[] @relation("UserConversations")
}
  conversations Conversation[] @relation("UserConversations")

  conversations Conversation[] @relation("UserConversations")
model Membership {
  conversations Conversation[] @relation("UserConversations")
  id        String   @id @default(cuid())
  conversations Conversation[] @relation("UserConversations")
  userId    String
  conversations Conversation[] @relation("UserConversations")
  companyId String
  conversations Conversation[] @relation("UserConversations")
  role      String // e.g., "admin", "manager", "accountant"
  conversations Conversation[] @relation("UserConversations")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversations Conversation[] @relation("UserConversations")
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  conversations Conversation[] @relation("UserConversations")
  createdAt DateTime @default(now())
  conversations Conversation[] @relation("UserConversations")

  conversations Conversation[] @relation("UserConversations")
  @@unique([userId, companyId])
  conversations Conversation[] @relation("UserConversations")
}
  conversations Conversation[] @relation("UserConversations")

  conversations Conversation[] @relation("UserConversations")
model MembershipRequest {
  conversations Conversation[] @relation("UserConversations")
  id        String   @id @default(cuid())
  conversations Conversation[] @relation("UserConversations")
  userId    String
  conversations Conversation[] @relation("UserConversations")
  companyId String
  conversations Conversation[] @relation("UserConversations")
  status    String   @default("pending") // pending, approved, rejected
  conversations Conversation[] @relation("UserConversations")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversations Conversation[] @relation("UserConversations")
  createdAt DateTime @default(now())
  conversations Conversation[] @relation("UserConversations")
}
  conversations Conversation[] @relation("UserConversations")

  conversations Conversation[] @relation("UserConversations")
model Account {
  conversations Conversation[] @relation("UserConversations")
  id            String         @id @default(cuid())
  conversations Conversation[] @relation("UserConversations")
  name          String
  conversations Conversation[] @relation("UserConversations")
  code          String
  conversations Conversation[] @relation("UserConversations")
  type          String
  conversations Conversation[] @relation("UserConversations")
  isDebit       Boolean
  conversations Conversation[] @relation("UserConversations")
  parentCode    String?
  conversations Conversation[] @relation("UserConversations")
  description   String?
  conversations Conversation[] @relation("UserConversations")
  companyId     String
  conversations Conversation[] @relation("UserConversations")
  company       Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  conversations Conversation[] @relation("UserConversations")
  debitEntries  JournalEntry[] @relation("DebitEntries")
  conversations Conversation[] @relation("UserConversations")
  creditEntries JournalEntry[] @relation("CreditEntries")
  conversations Conversation[] @relation("UserConversations")
  createdAt     DateTime       @default(now())
  conversations Conversation[] @relation("UserConversations")
  updatedAt     DateTime       @updatedAt
  conversations Conversation[] @relation("UserConversations")

  conversations Conversation[] @relation("UserConversations")
  @@unique([companyId, code])
  conversations Conversation[] @relation("UserConversations")
}
  conversations Conversation[] @relation("UserConversations")

  conversations Conversation[] @relation("UserConversations")
model JournalEntry {
  conversations Conversation[] @relation("UserConversations")
  id              String   @id @default(cuid())
  conversations Conversation[] @relation("UserConversations")
  date            DateTime
  conversations Conversation[] @relation("UserConversations")
  description     String
  conversations Conversation[] @relation("UserConversations")
  debitAmount     Float
  conversations Conversation[] @relation("UserConversations")
  creditAmount    Float
  conversations Conversation[] @relation("UserConversations")
  companyId       String
  conversations Conversation[] @relation("UserConversations")
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  conversations Conversation[] @relation("UserConversations")
  debitAccountId  String
  conversations Conversation[] @relation("UserConversations")
  creditAccountId String
  conversations Conversation[] @relation("UserConversations")
  debitAccount    Account  @relation("DebitEntries", fields: [debitAccountId], references: [id])
  conversations Conversation[] @relation("UserConversations")
  creditAccount   Account  @relation("CreditEntries", fields: [creditAccountId], references: [id])
  conversations Conversation[] @relation("UserConversations")
  createdAt       DateTime @default(now())
  conversations Conversation[] @relation("UserConversations")
}
  conversations Conversation[] @relation("UserConversations")

  conversations Conversation[] @relation("UserConversations")
model Item {
  conversations Conversation[] @relation("UserConversations")
  id          String   @id @default(cuid())
  conversations Conversation[] @relation("UserConversations")
  name        String
  conversations Conversation[] @relation("UserConversations")
  description String?
  conversations Conversation[] @relation("UserConversations")
  price       Float
  conversations Conversation[] @relation("UserConversations")
  cost        Float
  conversations Conversation[] @relation("UserConversations")
  quantity    Int      @default(0)
  conversations Conversation[] @relation("UserConversations")
  companyId   String
  conversations Conversation[] @relation("UserConversations")
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  conversations Conversation[] @relation("UserConversations")
  createdAt   DateTime @default(now())
  conversations Conversation[] @relation("UserConversations")
  updatedAt   DateTime @updatedAt
  conversations Conversation[] @relation("UserConversations")
}
  conversations Conversation[] @relation("UserConversations")

  conversations Conversation[] @relation("UserConversations")
model Customer {
  conversations Conversation[] @relation("UserConversations")
  id        String   @id @default(cuid())
  conversations Conversation[] @relation("UserConversations")
  name      String
  conversations Conversation[] @relation("UserConversations")
  email     String?
  conversations Conversation[] @relation("UserConversations")
  phone     String?
  conversations Conversation[] @relation("UserConversations")
  companyId String
  conversations Conversation[] @relation("UserConversations")
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  conversations Conversation[] @relation("UserConversations")
  sales     Sale[]
  conversations Conversation[] @relation("UserConversations")
  createdAt DateTime @default(now())
  conversations Conversation[] @relation("UserConversations")
}
  conversations Conversation[] @relation("UserConversations")

  conversations Conversation[] @relation("UserConversations")
model Supplier {
  conversations Conversation[] @relation("UserConversations")
  id        String     @id @default(cuid())
  conversations Conversation[] @relation("UserConversations")
  name      String
  conversations Conversation[] @relation("UserConversations")
  email     String?
  conversations Conversation[] @relation("UserConversations")
  phone     String?
  conversations Conversation[] @relation("UserConversations")
  companyId String
  conversations Conversation[] @relation("UserConversations")
  company   Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  conversations Conversation[] @relation("UserConversations")
  purchases Purchase[]
  conversations Conversation[] @relation("UserConversations")
  createdAt DateTime   @default(now())
  conversations Conversation[] @relation("UserConversations")
}
  conversations Conversation[] @relation("UserConversations")

  conversations Conversation[] @relation("UserConversations")
model Sale {
  conversations Conversation[] @relation("UserConversations")
  id          String   @id @default(cuid())
  conversations Conversation[] @relation("UserConversations")
  date        DateTime
  conversations Conversation[] @relation("UserConversations")
  totalAmount Float
  conversations Conversation[] @relation("UserConversations")
  status      String
  conversations Conversation[] @relation("UserConversations")
  companyId   String
  conversations Conversation[] @relation("UserConversations")
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  conversations Conversation[] @relation("UserConversations")
  customerId  String
  conversations Conversation[] @relation("UserConversations")
  customer    Customer @relation(fields: [customerId], references: [id])
  conversations Conversation[] @relation("UserConversations")
  createdAt   DateTime @default(now())
  conversations Conversation[] @relation("UserConversations")
}
  conversations Conversation[] @relation("UserConversations")

  conversations Conversation[] @relation("UserConversations")
model Purchase {
  conversations Conversation[] @relation("UserConversations")
  id          String   @id @default(cuid())
  conversations Conversation[] @relation("UserConversations")
  date        DateTime
  conversations Conversation[] @relation("UserConversations")
  totalAmount Float
  conversations Conversation[] @relation("UserConversations")
  status      String
  conversations Conversation[] @relation("UserConversations")
  companyId   String
  conversations Conversation[] @relation("UserConversations")
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  conversations Conversation[] @relation("UserConversations")
  supplierId  String
  conversations Conversation[] @relation("UserConversations")
  supplier    Supplier @relation(fields: [supplierId], references: [id])
  conversations Conversation[] @relation("UserConversations")
  createdAt   DateTime @default(now())
  conversations Conversation[] @relation("UserConversations")
}
  conversations Conversation[] @relation("UserConversations")

  conversations Conversation[] @relation("UserConversations")
model Notification {
  conversations Conversation[] @relation("UserConversations")
  id        String   @id @default(cuid())
  conversations Conversation[] @relation("UserConversations")
  userId    String
  conversations Conversation[] @relation("UserConversations")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversations Conversation[] @relation("UserConversations")
  type      String
  conversations Conversation[] @relation("UserConversations")
  message   String
  conversations Conversation[] @relation("UserConversations")
  isRead    Boolean  @default(false)
  conversations Conversation[] @relation("UserConversations")
  entityId  String?
  conversations Conversation[] @relation("UserConversations")
  createdAt DateTime @default(now())
  conversations Conversation[] @relation("UserConversations")
}
  conversations Conversation[] @relation("UserConversations")

  conversations Conversation[] @relation("UserConversations")
model Conversation {
  conversations Conversation[] @relation("UserConversations")
  id        String   @id @default(cuid())
  conversations Conversation[] @relation("UserConversations")
  createdAt DateTime @default(now())
  conversations Conversation[] @relation("UserConversations")
  updatedAt DateTime @updatedAt
  conversations Conversation[] @relation("UserConversations")
  messages  Message[]
  conversations Conversation[] @relation("UserConversations")
  members   User[]   @relation("UserConversations")
  conversations Conversation[] @relation("UserConversations")
}
  conversations Conversation[] @relation("UserConversations")

  conversations Conversation[] @relation("UserConversations")
model Participant {
  conversations Conversation[] @relation("UserConversations")
  id             String       @id @default(cuid())
  conversations Conversation[] @relation("UserConversations")
  userId         String
  conversations Conversation[] @relation("UserConversations")
  conversationId String
  conversations Conversation[] @relation("UserConversations")
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversations Conversation[] @relation("UserConversations")
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversations Conversation[] @relation("UserConversations")
  joinedAt       DateTime     @default(now())
  conversations Conversation[] @relation("UserConversations")

  conversations Conversation[] @relation("UserConversations")
  @@unique([userId, conversationId])
  conversations Conversation[] @relation("UserConversations")
}
  conversations Conversation[] @relation("UserConversations")

  conversations Conversation[] @relation("UserConversations")
model Message {
  conversations Conversation[] @relation("UserConversations")
  id             String              @id @default(cuid())
  conversations Conversation[] @relation("UserConversations")
  content        String
  conversations Conversation[] @relation("UserConversations")
  type           String              @default("text")
  conversations Conversation[] @relation("UserConversations")
  senderId       String
  conversations Conversation[] @relation("UserConversations")
  conversationId String
  conversations Conversation[] @relation("UserConversations")
  sender         User                @relation("sentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  conversations Conversation[] @relation("UserConversations")
  conversation   Conversation        @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversations Conversation[] @relation("UserConversations")
  createdAt      DateTime            @default(now())
  conversations Conversation[] @relation("UserConversations")
  readStatuses   MessageReadStatus[]
  conversations Conversation[] @relation("UserConversations")
  deletedFor     String[]
  conversations Conversation[] @relation("UserConversations")
}
  conversations Conversation[] @relation("UserConversations")

  conversations Conversation[] @relation("UserConversations")
model MessageReadStatus {
  conversations Conversation[] @relation("UserConversations")
  id        String   @id @default(cuid())
  conversations Conversation[] @relation("UserConversations")
  messageId String
  conversations Conversation[] @relation("UserConversations")
  userId    String
  conversations Conversation[] @relation("UserConversations")
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  conversations Conversation[] @relation("UserConversations")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversations Conversation[] @relation("UserConversations")
  readAt    DateTime @default(now())
  conversations Conversation[] @relation("UserConversations")

  conversations Conversation[] @relation("UserConversations")
  @@unique([messageId, userId])
  conversations Conversation[] @relation("UserConversations")
}
  conversations Conversation[] @relation("UserConversations")
