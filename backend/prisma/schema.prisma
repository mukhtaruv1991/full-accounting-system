generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // A company has many memberships (users)
  memberships Membership[]

  // Company-specific data
  accounts       Account[]
  items          Item[]
  customers      Customer[]
  suppliers      Supplier[]
  sales          Sale[]
  purchases      Purchase[]
  journalEntries JournalEntry[]
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // A user can be a member of many companies
  memberships Membership[]
}

// This is the new join table for the many-to-many relationship
model Membership {
  userId    String
  companyId String
  role      String   @default("MEMBER") // e.g., ADMIN, MEMBER, VIEWER
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@id([userId, companyId]) // Composite primary key
}

// --- Other Models remain linked to Company ---

model Account {
  id          String   @id @default(cuid())
  companyId   String
  name        String
  code        String   @unique
  type        String
  parentCode  String?
  description String?
  isDebit     Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Item {
  id          String   @id @default(cuid())
  companyId   String
  name        String
  description String?
  price       Float
  cost        Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Customer {
  id        String   @id @default(cuid())
  companyId String
  name      String
  email     String?
  phone     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  sales     Sale[]
}

model Supplier {
  id        String   @id @default(cuid())
  companyId String
  name      String
  email     String?
  phone     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  purchases Purchase[]
}

model Sale {
  id          String   @id @default(cuid())
  companyId   String
  date        DateTime
  customerId  String
  totalAmount Float
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  customer    Customer @relation(fields: [customerId], references: [id])
}

model Purchase {
  id          String   @id @default(cuid())
  companyId   String
  date        DateTime
  supplierId  String
  totalAmount Float
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  supplier    Supplier @relation(fields: [supplierId], references: [id])
}

model JournalEntry {
  id              String   @id @default(cuid())
  companyId       String
  date            DateTime
  description     String
  debitAccountId  String
  creditAccountId String
  debitAmount     Float
  creditAmount    Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
}
