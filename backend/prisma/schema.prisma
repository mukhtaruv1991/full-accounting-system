generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id          String        @id @default(cuid())
  name        String
  address     String?
  phone       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  memberships Membership[]
  accounts    Account[]
  items       Item[]
  sales       Sale[]
  purchases   Purchase[]
  suppliers   Supplier[]
  customers   Customer[]
  journalEntries JournalEntry[]
  conversations Conversation[]
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  name          String?
  password      String
  phone         String?       @unique
  phoneHash     String?       @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  memberships   Membership[]
  sentMessages  Message[]     @relation("sentMessages")
  readStatuses  MessageReadStatus[]
  participations Participant[]
}

model Membership {
  id        String   @id @default(cuid())
  userId    String
  companyId String
  role      String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, companyId])
}

model Account {
  id          String   @id @default(cuid())
  name        String
  code        String
  type        String
  isDebit     Boolean
  parentCode  String?
  description String?
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  debitEntries  JournalEntry[] @relation("DebitEntries")
  creditEntries JournalEntry[] @relation("CreditEntries")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([companyId, code])
}

model JournalEntry {
  id              String   @id @default(cuid())
  date            DateTime
  description     String
  debitAmount     Float
  creditAmount    Float
  companyId       String
  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  debitAccountId  String
  creditAccountId String
  debitAccount    Account  @relation("DebitEntries", fields: [debitAccountId], references: [id])
  creditAccount   Account  @relation("CreditEntries", fields: [creditAccountId], references: [id])
  createdAt       DateTime @default(now())
}

model Item {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  cost        Float
  quantity    Int      @default(0)
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Customer {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String?
  companyId String
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  sales     Sale[]
  createdAt DateTime @default(now())
}

model Supplier {
  id        String     @id @default(cuid())
  name      String
  email     String?
  phone     String?
  companyId String
  company   Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  purchases Purchase[]
  createdAt DateTime   @default(now())
}

model Sale {
  id          String   @id @default(cuid())
  date        DateTime
  totalAmount Float
  status      String
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  customerId  String
  customer    Customer @relation(fields: [customerId], references: [id])
  createdAt   DateTime @default(now())
}

model Purchase {
  id          String   @id @default(cuid())
  date        DateTime
  totalAmount Float
  status      String
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  supplierId  String
  supplier    Supplier @relation(fields: [supplierId], references: [id])
  createdAt   DateTime @default(now())
}

model Conversation {
  id           String        @id @default(cuid())
  name         String?
  isGroup      Boolean       @default(false)
  companyId    String?
  company      Company?      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  messages     Message[]
  participants Participant[]
}

model Participant {
  id             String       @id @default(cuid())
  userId         String
  conversationId String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  joinedAt       DateTime     @default(now())

  @@unique([userId, conversationId])
}

model Message {
  id             String              @id @default(cuid())
  content        String
  type           String              @default("text")
  senderId       String
  conversationId String
  sender         User                @relation("sentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  conversation   Conversation        @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  createdAt      DateTime            @default(now())
  readStatuses   MessageReadStatus[]
  deletedFor     String[]
}

model MessageReadStatus {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  readAt    DateTime @default(now())

  @@unique([messageId, userId])
}
